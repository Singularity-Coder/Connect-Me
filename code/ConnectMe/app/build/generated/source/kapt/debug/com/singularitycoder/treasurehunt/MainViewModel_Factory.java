// Generated by Dagger (https://dagger.dev).
package com.singularitycoder.treasurehunt;

import com.singularitycoder.connectme.helpers.ForegroundLocationServiceConnection;
import com.singularitycoder.connectme.helpers.locationData.LocationPreferences;
import com.singularitycoder.connectme.helpers.locationData.LocationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<LocationRepository> locationRepositoryProvider;

  private final Provider<LocationPreferences> locationPreferencesProvider;

  private final Provider<ForegroundLocationServiceConnection> serviceConnectionProvider;

  public MainViewModel_Factory(Provider<LocationRepository> locationRepositoryProvider,
      Provider<LocationPreferences> locationPreferencesProvider,
      Provider<ForegroundLocationServiceConnection> serviceConnectionProvider) {
    this.locationRepositoryProvider = locationRepositoryProvider;
    this.locationPreferencesProvider = locationPreferencesProvider;
    this.serviceConnectionProvider = serviceConnectionProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(locationRepositoryProvider.get(), locationPreferencesProvider.get(), serviceConnectionProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<LocationRepository> locationRepositoryProvider,
      Provider<LocationPreferences> locationPreferencesProvider,
      Provider<ForegroundLocationServiceConnection> serviceConnectionProvider) {
    return new MainViewModel_Factory(locationRepositoryProvider, locationPreferencesProvider, serviceConnectionProvider);
  }

  public static MainViewModel newInstance(LocationRepository locationRepository,
      LocationPreferences locationPreferences,
      ForegroundLocationServiceConnection serviceConnection) {
    return new MainViewModel(locationRepository, locationPreferences, serviceConnection);
  }
}
