// Generated by Dagger (https://dagger.dev).
package com.singularitycoder.connectme;

import com.singularitycoder.connectme.helpers.locationData.PlayServicesAvailabilityChecker;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<PlayServicesAvailabilityChecker> playServicesAvailabilityCheckerProvider;

  public MainActivity_MembersInjector(
      Provider<PlayServicesAvailabilityChecker> playServicesAvailabilityCheckerProvider) {
    this.playServicesAvailabilityCheckerProvider = playServicesAvailabilityCheckerProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<PlayServicesAvailabilityChecker> playServicesAvailabilityCheckerProvider) {
    return new MainActivity_MembersInjector(playServicesAvailabilityCheckerProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectPlayServicesAvailabilityChecker(instance, playServicesAvailabilityCheckerProvider.get());
  }

  @InjectedFieldSignature("com.singularitycoder.connectme.MainActivity.playServicesAvailabilityChecker")
  public static void injectPlayServicesAvailabilityChecker(MainActivity instance,
      PlayServicesAvailabilityChecker playServicesAvailabilityChecker) {
    instance.playServicesAvailabilityChecker = playServicesAvailabilityChecker;
  }
}
